{"/home/travis/build/npmtest/node-npmtest-ng2-validation/test.js":"/* istanbul instrument in package npmtest_ng2_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-validation/lib.npmtest_ng2_validation.js":"/* istanbul instrument in package npmtest_ng2_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ng2_validation = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ng2_validation = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-validation/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ng2-validation && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ng2_validation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ng2_validation\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ng2_validation.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ng2_validation.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ng2_validation.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ng2_validation.__dirname + '/lib.npmtest_ng2_validation.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ng2-validation/node_modules/ng2-validation/dist/index.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar base64_1 = require(\"./base64\");\nvar credit_card_1 = require(\"./credit-card\");\nvar date_1 = require(\"./date\");\nvar date_ios_1 = require(\"./date-ios\");\nvar digits_1 = require(\"./digits\");\nvar email_1 = require(\"./email\");\nvar equal_1 = require(\"./equal\");\nvar equal_to_1 = require(\"./equal-to\");\nvar greater_than_1 = require(\"./greater-than\");\nvar greater_than_equal_1 = require(\"./greater-than-equal\");\nvar json_1 = require(\"./json\");\nvar less_than_1 = require(\"./less-than\");\nvar less_than_equal_1 = require(\"./less-than-equal\");\nvar max_1 = require(\"./max\");\nvar max_date_1 = require(\"./max-date\");\nvar min_1 = require(\"./min\");\nvar min_date_1 = require(\"./min-date\");\nvar not_equal_1 = require(\"./not-equal\");\nvar not_equal_to_1 = require(\"./not-equal-to\");\nvar number_1 = require(\"./number\");\nvar phone_1 = require(\"./phone\");\nvar range_1 = require(\"./range\");\nvar range_length_1 = require(\"./range-length\");\nvar url_1 = require(\"./url\");\nvar uuid_1 = require(\"./uuid\");\nexports.CustomValidators = {\n    base64: base64_1.base64,\n    creditCard: credit_card_1.creditCard,\n    date: date_1.date,\n    dateISO: date_ios_1.dateISO,\n    digits: digits_1.digits,\n    email: email_1.email,\n    equal: equal_1.equal,\n    equalTo: equal_to_1.equalTo,\n    gt: greater_than_1.gt,\n    gte: greater_than_equal_1.gte,\n    json: json_1.json,\n    lt: less_than_1.lt,\n    lte: less_than_equal_1.lte,\n    max: max_1.max,\n    maxDate: max_date_1.maxDate,\n    min: min_1.min,\n    minDate: min_date_1.minDate,\n    notEqual: not_equal_1.notEqual,\n    notEqualTo: not_equal_to_1.notEqualTo,\n    number: number_1.number,\n    phone: phone_1.phone,\n    range: range_1.range,\n    rangeLength: range_length_1.rangeLength,\n    url: url_1.url,\n    uuid: uuid_1.uuid\n};\nvar CUSTOM_FORM_DIRECTIVES = [\n    base64_1.Base64Validator,\n    credit_card_1.CreditCardValidator,\n    date_1.DateValidator,\n    date_ios_1.DateISOValidator,\n    digits_1.DigitsValidator,\n    email_1.EmailValidator,\n    equal_1.EqualValidator,\n    equal_to_1.EqualToValidator,\n    greater_than_1.GreaterThanValidator,\n    greater_than_equal_1.GreaterThanEqualValidator,\n    json_1.JSONValidator,\n    less_than_1.LessThanValidator,\n    less_than_equal_1.LessThanEqualValidator,\n    max_1.MaxValidator,\n    max_date_1.MaxDateValidator,\n    min_1.MinValidator,\n    min_date_1.MinDateValidator,\n    not_equal_1.NotEqualValidator,\n    not_equal_to_1.NotEqualToValidator,\n    number_1.NumberValidator,\n    phone_1.PhoneValidator,\n    range_1.RangeValidator,\n    range_length_1.RangeLengthValidator,\n    url_1.UrlValidator,\n    uuid_1.UUIDValidator\n];\nvar CustomFormsModule = (function () {\n    function CustomFormsModule() {\n    }\n    return CustomFormsModule;\n}());\nCustomFormsModule.decorators = [\n    { type: core_1.NgModule, args: [{\n                declarations: [CUSTOM_FORM_DIRECTIVES],\n                exports: [CUSTOM_FORM_DIRECTIVES]\n            },] },\n];\n/** @nocollapse */\nCustomFormsModule.ctorParameters = function () { return []; };\nexports.CustomFormsModule = CustomFormsModule;\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-ng2-validation/node_modules/ng2-validation/bundles/ng2-validation.umd.js":"(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('libphonenumber-js')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/forms', 'libphonenumber-js'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.validation = global.ng.validation || {}),global.ng.core,global.ng.forms,global.libphonenumberJs));\n}(this, (function (exports,_angular_core,_angular_forms,libphonenumberJs) { 'use strict';\n\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nfunction __metadata(k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n}\n\nvar BASE64_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return Base64Validator$$1; }),\n    multi: true\n};\nvar Base64Validator$$1 = (function () {\n    function Base64Validator$$1() {\n    }\n    Base64Validator$$1.prototype.validate = function (c) {\n        return base64(c);\n    };\n    return Base64Validator$$1;\n}());\nBase64Validator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[base64][formControlName],[base64][formControl],[base64][ngModel]',\n        providers: [BASE64_VALIDATOR]\n    })\n], Base64Validator$$1);\n\nfunction isPresent(obj) {\n    return obj !== undefined && obj !== null;\n}\nfunction isDate(obj) {\n    return !/Invalid|NaN/.test(new Date(obj).toString());\n}\n\nvar base64 = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return /^(?:[A-Z0-9+\\/]{4})*(?:[A-Z0-9+\\/]{2}==|[A-Z0-9+\\/]{3}=|[A-Z0-9+\\/]{4})$/i.test(v) ? null : { 'base64': true };\n};\n\nvar CREDIT_CARD_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return CreditCardValidator$$1; }),\n    multi: true\n};\nvar CreditCardValidator$$1 = (function () {\n    function CreditCardValidator$$1() {\n    }\n    CreditCardValidator$$1.prototype.validate = function (c) {\n        return creditCard(c);\n    };\n    return CreditCardValidator$$1;\n}());\nCreditCardValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[creditCard][formControlName],[creditCard][formControl],[creditCard][ngModel]',\n        providers: [CREDIT_CARD_VALIDATOR]\n    })\n], CreditCardValidator$$1);\n\nvar creditCard = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    var sanitized = v.replace(/[^0-9]+/g, '');\n    // problem with chrome\n    if (!(/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/.test(sanitized))) {\n        return { creditCard: true };\n    }\n    var sum = 0;\n    var digit;\n    var tmpNum;\n    var shouldDouble;\n    for (var i = sanitized.length - 1; i >= 0; i--) {\n        digit = sanitized.substring(i, (i + 1));\n        tmpNum = parseInt(digit, 10);\n        if (shouldDouble) {\n            tmpNum *= 2;\n            if (tmpNum >= 10) {\n                sum += ((tmpNum % 10) + 1);\n            }\n            else {\n                sum += tmpNum;\n            }\n        }\n        else {\n            sum += tmpNum;\n        }\n        shouldDouble = !shouldDouble;\n    }\n    if (Boolean((sum % 10) === 0 ? sanitized : false)) {\n        return null;\n    }\n    return { creditCard: true };\n};\n\nvar DATE_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return DateValidator$$1; }),\n    multi: true\n};\nvar DateValidator$$1 = (function () {\n    function DateValidator$$1() {\n    }\n    DateValidator$$1.prototype.validate = function (c) {\n        return date(c);\n    };\n    return DateValidator$$1;\n}());\nDateValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[date][formControlName],[date][formControl],[date][ngModel]',\n        providers: [DATE_VALIDATOR]\n    })\n], DateValidator$$1);\n\nvar date = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return isDate(v) ? null : { date: true };\n};\n\nvar DATE_ISO_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return DateISOValidator$$1; }),\n    multi: true\n};\nvar DateISOValidator$$1 = (function () {\n    function DateISOValidator$$1() {\n    }\n    DateISOValidator$$1.prototype.validate = function (c) {\n        return dateISO(c);\n    };\n    return DateISOValidator$$1;\n}());\nDateISOValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[dateISO][formControlName],[dateISO][formControl],[dateISO][ngModel]',\n        providers: [DATE_ISO_VALIDATOR]\n    })\n], DateISOValidator$$1);\n\nvar dateISO = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(v) ? null : { dateISO: true };\n};\n\nvar DIGITS_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return DigitsValidator$$1; }),\n    multi: true\n};\nvar DigitsValidator$$1 = (function () {\n    function DigitsValidator$$1() {\n    }\n    DigitsValidator$$1.prototype.validate = function (c) {\n        return digits(c);\n    };\n    return DigitsValidator$$1;\n}());\nDigitsValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[digits][formControlName],[digits][formControl],[digits][ngModel]',\n        providers: [DIGITS_VALIDATOR]\n    })\n], DigitsValidator$$1);\n\nvar digits = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return /^\\d+$/.test(v) ? null : { digits: true };\n};\n\nvar EMAIL_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return EmailValidator$$1; }),\n    multi: true\n};\nvar EmailValidator$$1 = (function () {\n    function EmailValidator$$1() {\n    }\n    EmailValidator$$1.prototype.validate = function (c) {\n        return email(c);\n    };\n    return EmailValidator$$1;\n}());\nEmailValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[email][formControlName],[email][formControl],[email][ngModel]',\n        providers: [EMAIL_VALIDATOR]\n    })\n], EmailValidator$$1);\n\nvar email = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(v) ? null : { 'email': true };\n};\n\nvar EQUAL_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return EqualValidator$$1; }),\n    multi: true\n};\nvar EqualValidator$$1 = (function () {\n    function EqualValidator$$1() {\n    }\n    EqualValidator$$1.prototype.ngOnInit = function () {\n        this.validator = equal(this.equal);\n    };\n    EqualValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'equal') {\n                this.validator = equal(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    EqualValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    EqualValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return EqualValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Object)\n], EqualValidator$$1.prototype, \"equal\", void 0);\nEqualValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[equal][formControlName],[equal][formControl],[equal][ngModel]',\n        providers: [EQUAL_VALIDATOR]\n    })\n], EqualValidator$$1);\n\nvar equal = function (val) {\n    return function (control) {\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = control.value;\n        return val === v ? null : { equal: true };\n    };\n};\n\nvar EQUAL_TO_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return EqualToValidator$$1; }),\n    multi: true\n};\nvar EqualToValidator$$1 = (function () {\n    function EqualToValidator$$1() {\n    }\n    EqualToValidator$$1.prototype.ngOnInit = function () {\n        this.validator = equalTo(this.equalTo);\n    };\n    EqualToValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    return EqualToValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", typeof (_a = typeof _angular_forms.FormControl !== \"undefined\" && _angular_forms.FormControl) === \"function\" && _a || Object)\n], EqualToValidator$$1.prototype, \"equalTo\", void 0);\nEqualToValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[equalTo][formControlName],[equalTo][formControl],[equalTo][ngModel]',\n        providers: [EQUAL_TO_VALIDATOR]\n    })\n], EqualToValidator$$1);\nvar _a;\n\nvar equalTo = function (equalControl) {\n    var subscribe = false;\n    return function (control) {\n        if (!subscribe) {\n            subscribe = true;\n            equalControl.valueChanges.subscribe(function () {\n                control.updateValueAndValidity();\n            });\n        }\n        var v = control.value;\n        return equalControl.value === v ? null : { equalTo: true };\n    };\n};\n\nvar GREATER_THAN_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return GreaterThanValidator$$1; }),\n    multi: true\n};\nvar GreaterThanValidator$$1 = (function () {\n    function GreaterThanValidator$$1() {\n    }\n    GreaterThanValidator$$1.prototype.ngOnInit = function () {\n        this.validator = gt(this.gt);\n    };\n    GreaterThanValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'gt') {\n                this.validator = gt(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    GreaterThanValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    GreaterThanValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return GreaterThanValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Number)\n], GreaterThanValidator$$1.prototype, \"gt\", void 0);\nGreaterThanValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[gt][formControlName],[gt][formControl],[gt][ngModel]',\n        providers: [GREATER_THAN_VALIDATOR]\n    })\n], GreaterThanValidator$$1);\n\nvar gt = function (gt) {\n    return function (control) {\n        if (!isPresent(gt))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v > +gt ? null : { gt: true };\n    };\n};\n\nvar GREATER_THAN_EQUAL_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return GreaterThanEqualValidator$$1; }),\n    multi: true\n};\nvar GreaterThanEqualValidator$$1 = (function () {\n    function GreaterThanEqualValidator$$1() {\n    }\n    GreaterThanEqualValidator$$1.prototype.ngOnInit = function () {\n        this.validator = gte(this.gte);\n    };\n    GreaterThanEqualValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'gte') {\n                this.validator = gte(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    GreaterThanEqualValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    GreaterThanEqualValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return GreaterThanEqualValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Number)\n], GreaterThanEqualValidator$$1.prototype, \"gte\", void 0);\nGreaterThanEqualValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[gte][formControlName],[gte][formControl],[gte][ngModel]',\n        providers: [GREATER_THAN_EQUAL_VALIDATOR]\n    })\n], GreaterThanEqualValidator$$1);\n\nvar gte = function (gte) {\n    return function (control) {\n        if (!isPresent(gte))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v >= +gte ? null : { gte: true };\n    };\n};\n\nvar JSON_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return JSONValidator$$1; }),\n    multi: true\n};\nvar JSONValidator$$1 = (function () {\n    function JSONValidator$$1() {\n    }\n    JSONValidator$$1.prototype.validate = function (c) {\n        return json(c);\n    };\n    return JSONValidator$$1;\n}());\nJSONValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[json][formControlName],[json][formControl],[json][ngModel]',\n        providers: [JSON_VALIDATOR]\n    })\n], JSONValidator$$1);\n\nvar json = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    try {\n        var obj = JSON.parse(v);\n        if (Boolean(obj) && typeof obj === 'object') {\n            return null;\n        }\n    }\n    catch (e) {\n    }\n    return { json: true };\n};\n\nvar LESS_THAN_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return LessThanValidator$$1; }),\n    multi: true\n};\nvar LessThanValidator$$1 = (function () {\n    function LessThanValidator$$1() {\n    }\n    LessThanValidator$$1.prototype.ngOnInit = function () {\n        this.validator = lt(this.lt);\n    };\n    LessThanValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'lt') {\n                this.validator = lt(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    LessThanValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    LessThanValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return LessThanValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Number)\n], LessThanValidator$$1.prototype, \"lt\", void 0);\nLessThanValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[lt][formControlName],[lt][formControl],[lt][ngModel]',\n        providers: [LESS_THAN_VALIDATOR]\n    })\n], LessThanValidator$$1);\n\nvar lt = function (lt) {\n    return function (control) {\n        if (!isPresent(lt))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v < +lt ? null : { lt: true };\n    };\n};\n\nvar LESS_THAN_EQUAL_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return LessThanEqualValidator$$1; }),\n    multi: true\n};\nvar LessThanEqualValidator$$1 = (function () {\n    function LessThanEqualValidator$$1() {\n    }\n    LessThanEqualValidator$$1.prototype.ngOnInit = function () {\n        this.validator = lte(this.lte);\n    };\n    LessThanEqualValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'lte') {\n                this.validator = lte(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    LessThanEqualValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    LessThanEqualValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return LessThanEqualValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Number)\n], LessThanEqualValidator$$1.prototype, \"lte\", void 0);\nLessThanEqualValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[lte][formControlName],[lte][formControl],[lte][ngModel]',\n        providers: [LESS_THAN_EQUAL_VALIDATOR]\n    })\n], LessThanEqualValidator$$1);\n\nvar lte = function (lte) {\n    return function (control) {\n        if (!isPresent(lte))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v <= +lte ? null : { lte: true };\n    };\n};\n\nvar MAX_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return MaxValidator$$1; }),\n    multi: true\n};\nvar MaxValidator$$1 = (function () {\n    function MaxValidator$$1() {\n    }\n    MaxValidator$$1.prototype.ngOnInit = function () {\n        this.validator = max(this.max);\n    };\n    MaxValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'max') {\n                this.validator = max(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    MaxValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    MaxValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return MaxValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Number)\n], MaxValidator$$1.prototype, \"max\", void 0);\nMaxValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n        providers: [MAX_VALIDATOR]\n    })\n], MaxValidator$$1);\n\nvar max = function (max) {\n    return function (control) {\n        if (!isPresent(max))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v <= +max ? null : { actualValue: v, requiredValue: +max, max: true };\n    };\n};\n\nvar MAX_DATE_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return MaxDateValidator$$1; }),\n    multi: true\n};\nvar MaxDateValidator$$1 = (function () {\n    function MaxDateValidator$$1() {\n    }\n    MaxDateValidator$$1.prototype.ngOnInit = function () {\n        this.validator = maxDate(this.maxDate);\n    };\n    MaxDateValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'maxDate') {\n                this.validator = maxDate(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    MaxDateValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    MaxDateValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return MaxDateValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Object)\n], MaxDateValidator$$1.prototype, \"maxDate\", void 0);\nMaxDateValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[maxDate][formControlName],[maxDate][formControl],[maxDate][ngModel]',\n        providers: [MAX_DATE_VALIDATOR]\n    })\n], MaxDateValidator$$1);\n\nvar maxDate = function (maxDate) {\n    if (!isDate(maxDate) && !(maxDate instanceof Function)) {\n        throw Error('maxDate value must be or return a formatted date');\n    }\n    return function (control) {\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var d = new Date(control.value);\n        if (!isDate(d))\n            return { maxDate: true };\n        if (maxDate instanceof Function)\n            maxDate = maxDate();\n        return d <= new Date(maxDate) ? null : { maxDate: true };\n    };\n};\n\nvar MIN_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return MinValidator$$1; }),\n    multi: true\n};\nvar MinValidator$$1 = (function () {\n    function MinValidator$$1() {\n    }\n    MinValidator$$1.prototype.ngOnInit = function () {\n        this.validator = min(this.min);\n    };\n    MinValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'min') {\n                this.validator = min(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    MinValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    MinValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return MinValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Number)\n], MinValidator$$1.prototype, \"min\", void 0);\nMinValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n        providers: [MIN_VALIDATOR]\n    })\n], MinValidator$$1);\n\nvar min = function (min) {\n    return function (control) {\n        if (!isPresent(min))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v >= +min ? null : { actualValue: v, requiredValue: +min, min: true };\n    };\n};\n\nvar MIN_DATE_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return MinDateValidator$$1; }),\n    multi: true\n};\nvar MinDateValidator$$1 = (function () {\n    function MinDateValidator$$1() {\n    }\n    MinDateValidator$$1.prototype.ngOnInit = function () {\n        this.validator = minDate(this.minDate);\n    };\n    MinDateValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'minDate') {\n                this.validator = minDate(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    MinDateValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    MinDateValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return MinDateValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Object)\n], MinDateValidator$$1.prototype, \"minDate\", void 0);\nMinDateValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[minDate][formControlName],[minDate][formControl],[minDate][ngModel]',\n        providers: [MIN_DATE_VALIDATOR]\n    })\n], MinDateValidator$$1);\n\nvar minDate = function (minDate) {\n    if (!isDate(minDate) && !(minDate instanceof Function)) {\n        throw Error('minDate value must be or return a formatted date');\n    }\n    return function (control) {\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var d = new Date(control.value);\n        if (!isDate(d))\n            return { minDate: true };\n        if (minDate instanceof Function)\n            minDate = minDate();\n        return d >= new Date(minDate) ? null : { minDate: true };\n    };\n};\n\nvar NOT_EQUAL_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return NotEqualValidator$$1; }),\n    multi: true\n};\nvar NotEqualValidator$$1 = (function () {\n    function NotEqualValidator$$1() {\n    }\n    NotEqualValidator$$1.prototype.ngOnInit = function () {\n        this.validator = notEqual(this.notEqual);\n    };\n    NotEqualValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'notEqual') {\n                this.validator = notEqual(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    NotEqualValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    NotEqualValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return NotEqualValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Object)\n], NotEqualValidator$$1.prototype, \"notEqual\", void 0);\nNotEqualValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[notEqual][formControlName],[notEqual][formControl],[notEqual][ngModel]',\n        providers: [NOT_EQUAL_VALIDATOR]\n    })\n], NotEqualValidator$$1);\n\nvar notEqual = function (val) {\n    return function (control) {\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = control.value;\n        return val !== v ? null : { notEqual: true };\n    };\n};\n\nvar NOT_EQUAL_TO_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return NotEqualToValidator$$1; }),\n    multi: true\n};\nvar NotEqualToValidator$$1 = (function () {\n    function NotEqualToValidator$$1() {\n    }\n    NotEqualToValidator$$1.prototype.ngOnInit = function () {\n        this.validator = notEqualTo(this.notEqualTo);\n    };\n    NotEqualToValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    return NotEqualToValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", typeof (_a$1 = typeof _angular_forms.FormControl !== \"undefined\" && _angular_forms.FormControl) === \"function\" && _a$1 || Object)\n], NotEqualToValidator$$1.prototype, \"notEqualTo\", void 0);\nNotEqualToValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[notEqualTo][formControlName],[notEqualTo][formControl],[notEqualTo][ngModel]',\n        providers: [NOT_EQUAL_TO_VALIDATOR]\n    })\n], NotEqualToValidator$$1);\nvar _a$1;\n\nvar notEqualTo = function (notEqualControl) {\n    var subscribe = false;\n    return function (control) {\n        if (!subscribe) {\n            subscribe = true;\n            notEqualControl.valueChanges.subscribe(function () {\n                control.updateValueAndValidity();\n            });\n        }\n        var v = control.value;\n        return notEqualControl.value !== v ? null : { notEqualTo: true };\n    };\n};\n\nvar NUMBER_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return NumberValidator$$1; }),\n    multi: true\n};\nvar NumberValidator$$1 = (function () {\n    function NumberValidator$$1() {\n    }\n    NumberValidator$$1.prototype.validate = function (c) {\n        return number(c);\n    };\n    return NumberValidator$$1;\n}());\nNumberValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[number][formControlName],[number][formControl],[number][ngModel]',\n        providers: [NUMBER_VALIDATOR]\n    })\n], NumberValidator$$1);\n\nvar number = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return /^(?:-?\\d+|-?\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d+)?$/.test(v) ? null : { 'number': true };\n};\n\nvar PHONE_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return PhoneValidator$$1; }),\n    multi: true\n};\nvar PhoneValidator$$1 = (function () {\n    function PhoneValidator$$1() {\n    }\n    PhoneValidator$$1.prototype.ngOnInit = function () {\n        this.validator = phone(this.phone);\n    };\n    PhoneValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'phone') {\n                this.validator = phone(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    PhoneValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    PhoneValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return PhoneValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", String)\n], PhoneValidator$$1.prototype, \"phone\", void 0);\nPhoneValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[phone][formControlName],[phone][formControl],[phone][ngModel]',\n        providers: [PHONE_VALIDATOR]\n    })\n], PhoneValidator$$1);\n\nvar phone = function (country) {\n    return function (control) {\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = control.value;\n        return libphonenumberJs.isValidNumber({ phone: v, country: country }) ? null : { phone: true };\n    };\n};\n\nvar RANGE_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return RangeValidator$$1; }),\n    multi: true\n};\nvar RangeValidator$$1 = (function () {\n    function RangeValidator$$1() {\n    }\n    RangeValidator$$1.prototype.ngOnInit = function () {\n        this.validator = range(this.range);\n    };\n    RangeValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'range') {\n                this.validator = range(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    RangeValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    RangeValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return RangeValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Array)\n], RangeValidator$$1.prototype, \"range\", void 0);\nRangeValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[range][formControlName],[range][formControl],[range][ngModel]',\n        providers: [RANGE_VALIDATOR]\n    })\n], RangeValidator$$1);\n\nvar range = function (range) {\n    return function (control) {\n        if (!isPresent(range))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = +control.value;\n        return v >= range[0] && v <= range[1] ? null : { range: true };\n    };\n};\n\nvar RANGE_LENGTH_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return RangeLengthValidator$$1; }),\n    multi: true\n};\nvar RangeLengthValidator$$1 = (function () {\n    function RangeLengthValidator$$1() {\n    }\n    RangeLengthValidator$$1.prototype.ngOnInit = function () {\n        this.validator = rangeLength(this.rangeLength);\n    };\n    RangeLengthValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'rangeLength') {\n                this.validator = rangeLength(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    RangeLengthValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    RangeLengthValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return RangeLengthValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Array)\n], RangeLengthValidator$$1.prototype, \"rangeLength\", void 0);\nRangeLengthValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[rangeLength][formControlName],[rangeLength][formControl],[rangeLength][ngModel]',\n        providers: [RANGE_LENGTH_VALIDATOR]\n    })\n], RangeLengthValidator$$1);\n\nvar rangeLength = function (rangeLength) {\n    return function (control) {\n        if (!isPresent(rangeLength))\n            return null;\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = control.value;\n        return v.length >= rangeLength[0] && v.length <= rangeLength[1] ? null : { rangeLength: true };\n    };\n};\n\nvar URL_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return UrlValidator$$1; }),\n    multi: true\n};\nvar UrlValidator$$1 = (function () {\n    function UrlValidator$$1() {\n    }\n    UrlValidator$$1.prototype.validate = function (c) {\n        return url(c);\n    };\n    return UrlValidator$$1;\n}());\nUrlValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[url][formControlName],[url][formControl],[url][ngModel]',\n        providers: [URL_VALIDATOR]\n    })\n], UrlValidator$$1);\n\nvar url = function (control) {\n    if (isPresent(_angular_forms.Validators.required(control)))\n        return null;\n    var v = control.value;\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})).?)(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(v) ? null : { 'url': true };\n};\n\nvar UUID_VALIDATOR = {\n    provide: _angular_forms.NG_VALIDATORS,\n    useExisting: _angular_core.forwardRef(function () { return UUIDValidator$$1; }),\n    multi: true\n};\nvar UUIDValidator$$1 = (function () {\n    function UUIDValidator$$1() {\n    }\n    UUIDValidator$$1.prototype.ngOnInit = function () {\n        this.validator = uuid(this.uuid);\n    };\n    UUIDValidator$$1.prototype.ngOnChanges = function (changes) {\n        for (var key in changes) {\n            if (key === 'uuid') {\n                this.validator = uuid(changes[key].currentValue);\n                if (this.onChange)\n                    this.onChange();\n            }\n        }\n    };\n    UUIDValidator$$1.prototype.validate = function (c) {\n        return this.validator(c);\n    };\n    UUIDValidator$$1.prototype.registerOnValidatorChange = function (fn) {\n        this.onChange = fn;\n    };\n    return UUIDValidator$$1;\n}());\n__decorate([\n    _angular_core.Input(),\n    __metadata(\"design:type\", Object)\n], UUIDValidator$$1.prototype, \"uuid\", void 0);\nUUIDValidator$$1 = __decorate([\n    _angular_core.Directive({\n        selector: '[uuid][formControlName],[uuid][formControl],[uuid][ngModel]',\n        providers: [UUID_VALIDATOR]\n    })\n], UUIDValidator$$1);\n\nvar uuids = {\n    '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n    '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n    '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n    'all': /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n};\nvar uuid = function (version) {\n    return function (control) {\n        if (isPresent(_angular_forms.Validators.required(control)))\n            return null;\n        var v = control.value;\n        var pattern = uuids[version] || uuids.all;\n        return (new RegExp(pattern)).test(v) ? null : { uuid: true };\n    };\n};\n\nvar CustomValidators = {\n    base64: base64,\n    creditCard: creditCard,\n    date: date,\n    dateISO: dateISO,\n    digits: digits,\n    email: email,\n    equal: equal,\n    equalTo: equalTo,\n    gt: gt,\n    gte: gte,\n    json: json,\n    lt: lt,\n    lte: lte,\n    max: max,\n    maxDate: maxDate,\n    min: min,\n    minDate: minDate,\n    notEqual: notEqual,\n    notEqualTo: notEqualTo,\n    number: number,\n    phone: phone,\n    range: range,\n    rangeLength: rangeLength,\n    url: url,\n    uuid: uuid\n};\nvar CUSTOM_FORM_DIRECTIVES = [\n    Base64Validator$$1,\n    CreditCardValidator$$1,\n    DateValidator$$1,\n    DateISOValidator$$1,\n    DigitsValidator$$1,\n    EmailValidator$$1,\n    EqualValidator$$1,\n    EqualToValidator$$1,\n    GreaterThanValidator$$1,\n    GreaterThanEqualValidator$$1,\n    JSONValidator$$1,\n    LessThanValidator$$1,\n    LessThanEqualValidator$$1,\n    MaxValidator$$1,\n    MaxDateValidator$$1,\n    MinValidator$$1,\n    MinDateValidator$$1,\n    NotEqualValidator$$1,\n    NotEqualToValidator$$1,\n    NumberValidator$$1,\n    PhoneValidator$$1,\n    RangeValidator$$1,\n    RangeLengthValidator$$1,\n    UrlValidator$$1,\n    UUIDValidator$$1\n];\nexports.CustomFormsModule = (function () {\n    function CustomFormsModule() {\n    }\n    return CustomFormsModule;\n}());\nexports.CustomFormsModule = __decorate([\n    _angular_core.NgModule({\n        declarations: [CUSTOM_FORM_DIRECTIVES],\n        exports: [CUSTOM_FORM_DIRECTIVES]\n    })\n], exports.CustomFormsModule);\n\nexports.CustomValidators = CustomValidators;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ng2-validation.umd.js.map\n"}